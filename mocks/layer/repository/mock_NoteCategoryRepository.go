// Code generated by mockery. DO NOT EDIT.

package mocks

import (
	entity "assistant-go/internal/layer/entity"

	mock "github.com/stretchr/testify/mock"
)

// MockNoteCategoryRepository is an autogenerated mock type for the NoteCategoryRepository type
type MockNoteCategoryRepository struct {
	mock.Mock
}

type MockNoteCategoryRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockNoteCategoryRepository) EXPECT() *MockNoteCategoryRepository_Expecter {
	return &MockNoteCategoryRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: in
func (_m *MockNoteCategoryRepository) Create(in entity.NoteCategory) (*entity.NoteCategory, error) {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *entity.NoteCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(entity.NoteCategory) (*entity.NoteCategory, error)); ok {
		return rf(in)
	}
	if rf, ok := ret.Get(0).(func(entity.NoteCategory) *entity.NoteCategory); ok {
		r0 = rf(in)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.NoteCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(entity.NoteCategory) error); ok {
		r1 = rf(in)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNoteCategoryRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockNoteCategoryRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - in entity.NoteCategory
func (_e *MockNoteCategoryRepository_Expecter) Create(in interface{}) *MockNoteCategoryRepository_Create_Call {
	return &MockNoteCategoryRepository_Create_Call{Call: _e.mock.On("Create", in)}
}

func (_c *MockNoteCategoryRepository_Create_Call) Run(run func(in entity.NoteCategory)) *MockNoteCategoryRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(entity.NoteCategory))
	})
	return _c
}

func (_c *MockNoteCategoryRepository_Create_Call) Return(_a0 *entity.NoteCategory, _a1 error) *MockNoteCategoryRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNoteCategoryRepository_Create_Call) RunAndReturn(run func(entity.NoteCategory) (*entity.NoteCategory, error)) *MockNoteCategoryRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByIds provides a mock function with given fields: catIDs
func (_m *MockNoteCategoryRepository) DeleteByIds(catIDs []int) error {
	ret := _m.Called(catIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByIds")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func([]int) error); ok {
		r0 = rf(catIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNoteCategoryRepository_DeleteByIds_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByIds'
type MockNoteCategoryRepository_DeleteByIds_Call struct {
	*mock.Call
}

// DeleteByIds is a helper method to define mock.On call
//   - catIDs []int
func (_e *MockNoteCategoryRepository_Expecter) DeleteByIds(catIDs interface{}) *MockNoteCategoryRepository_DeleteByIds_Call {
	return &MockNoteCategoryRepository_DeleteByIds_Call{Call: _e.mock.On("DeleteByIds", catIDs)}
}

func (_c *MockNoteCategoryRepository_DeleteByIds_Call) Run(run func(catIDs []int)) *MockNoteCategoryRepository_DeleteByIds_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].([]int))
	})
	return _c
}

func (_c *MockNoteCategoryRepository_DeleteByIds_Call) Return(_a0 error) *MockNoteCategoryRepository_DeleteByIds_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNoteCategoryRepository_DeleteByIds_Call) RunAndReturn(run func([]int) error) *MockNoteCategoryRepository_DeleteByIds_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteByUserId provides a mock function with given fields: userID
func (_m *MockNoteCategoryRepository) DeleteByUserId(userID int) error {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteByUserId")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(int) error); ok {
		r0 = rf(userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNoteCategoryRepository_DeleteByUserId_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteByUserId'
type MockNoteCategoryRepository_DeleteByUserId_Call struct {
	*mock.Call
}

// DeleteByUserId is a helper method to define mock.On call
//   - userID int
func (_e *MockNoteCategoryRepository_Expecter) DeleteByUserId(userID interface{}) *MockNoteCategoryRepository_DeleteByUserId_Call {
	return &MockNoteCategoryRepository_DeleteByUserId_Call{Call: _e.mock.On("DeleteByUserId", userID)}
}

func (_c *MockNoteCategoryRepository_DeleteByUserId_Call) Run(run func(userID int)) *MockNoteCategoryRepository_DeleteByUserId_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockNoteCategoryRepository_DeleteByUserId_Call) Return(_a0 error) *MockNoteCategoryRepository_DeleteByUserId_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNoteCategoryRepository_DeleteByUserId_Call) RunAndReturn(run func(int) error) *MockNoteCategoryRepository_DeleteByUserId_Call {
	_c.Call.Return(run)
	return _c
}

// FindAll provides a mock function with given fields: userID
func (_m *MockNoteCategoryRepository) FindAll(userID int) ([]*entity.NoteCategory, error) {
	ret := _m.Called(userID)

	if len(ret) == 0 {
		panic("no return value specified for FindAll")
	}

	var r0 []*entity.NoteCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]*entity.NoteCategory, error)); ok {
		return rf(userID)
	}
	if rf, ok := ret.Get(0).(func(int) []*entity.NoteCategory); ok {
		r0 = rf(userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.NoteCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNoteCategoryRepository_FindAll_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAll'
type MockNoteCategoryRepository_FindAll_Call struct {
	*mock.Call
}

// FindAll is a helper method to define mock.On call
//   - userID int
func (_e *MockNoteCategoryRepository_Expecter) FindAll(userID interface{}) *MockNoteCategoryRepository_FindAll_Call {
	return &MockNoteCategoryRepository_FindAll_Call{Call: _e.mock.On("FindAll", userID)}
}

func (_c *MockNoteCategoryRepository_FindAll_Call) Run(run func(userID int)) *MockNoteCategoryRepository_FindAll_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int))
	})
	return _c
}

func (_c *MockNoteCategoryRepository_FindAll_Call) Return(_a0 []*entity.NoteCategory, _a1 error) *MockNoteCategoryRepository_FindAll_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNoteCategoryRepository_FindAll_Call) RunAndReturn(run func(int) ([]*entity.NoteCategory, error)) *MockNoteCategoryRepository_FindAll_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIDAndUser provides a mock function with given fields: userID, id
func (_m *MockNoteCategoryRepository) FindByIDAndUser(userID int, id int) (*entity.NoteCategory, error) {
	ret := _m.Called(userID, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDAndUser")
	}

	var r0 *entity.NoteCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) (*entity.NoteCategory, error)); ok {
		return rf(userID, id)
	}
	if rf, ok := ret.Get(0).(func(int, int) *entity.NoteCategory); ok {
		r0 = rf(userID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.NoteCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNoteCategoryRepository_FindByIDAndUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIDAndUser'
type MockNoteCategoryRepository_FindByIDAndUser_Call struct {
	*mock.Call
}

// FindByIDAndUser is a helper method to define mock.On call
//   - userID int
//   - id int
func (_e *MockNoteCategoryRepository_Expecter) FindByIDAndUser(userID interface{}, id interface{}) *MockNoteCategoryRepository_FindByIDAndUser_Call {
	return &MockNoteCategoryRepository_FindByIDAndUser_Call{Call: _e.mock.On("FindByIDAndUser", userID, id)}
}

func (_c *MockNoteCategoryRepository_FindByIDAndUser_Call) Run(run func(userID int, id int)) *MockNoteCategoryRepository_FindByIDAndUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockNoteCategoryRepository_FindByIDAndUser_Call) Return(_a0 *entity.NoteCategory, _a1 error) *MockNoteCategoryRepository_FindByIDAndUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNoteCategoryRepository_FindByIDAndUser_Call) RunAndReturn(run func(int, int) (*entity.NoteCategory, error)) *MockNoteCategoryRepository_FindByIDAndUser_Call {
	_c.Call.Return(run)
	return _c
}

// FindByIDAndUserWithChildren provides a mock function with given fields: userID, id
func (_m *MockNoteCategoryRepository) FindByIDAndUserWithChildren(userID int, id int) ([]*entity.NoteCategory, error) {
	ret := _m.Called(userID, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByIDAndUserWithChildren")
	}

	var r0 []*entity.NoteCategory
	var r1 error
	if rf, ok := ret.Get(0).(func(int, int) ([]*entity.NoteCategory, error)); ok {
		return rf(userID, id)
	}
	if rf, ok := ret.Get(0).(func(int, int) []*entity.NoteCategory); ok {
		r0 = rf(userID, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.NoteCategory)
		}
	}

	if rf, ok := ret.Get(1).(func(int, int) error); ok {
		r1 = rf(userID, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNoteCategoryRepository_FindByIDAndUserWithChildren_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByIDAndUserWithChildren'
type MockNoteCategoryRepository_FindByIDAndUserWithChildren_Call struct {
	*mock.Call
}

// FindByIDAndUserWithChildren is a helper method to define mock.On call
//   - userID int
//   - id int
func (_e *MockNoteCategoryRepository_Expecter) FindByIDAndUserWithChildren(userID interface{}, id interface{}) *MockNoteCategoryRepository_FindByIDAndUserWithChildren_Call {
	return &MockNoteCategoryRepository_FindByIDAndUserWithChildren_Call{Call: _e.mock.On("FindByIDAndUserWithChildren", userID, id)}
}

func (_c *MockNoteCategoryRepository_FindByIDAndUserWithChildren_Call) Run(run func(userID int, id int)) *MockNoteCategoryRepository_FindByIDAndUserWithChildren_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(int))
	})
	return _c
}

func (_c *MockNoteCategoryRepository_FindByIDAndUserWithChildren_Call) Return(_a0 []*entity.NoteCategory, _a1 error) *MockNoteCategoryRepository_FindByIDAndUserWithChildren_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNoteCategoryRepository_FindByIDAndUserWithChildren_Call) RunAndReturn(run func(int, int) ([]*entity.NoteCategory, error)) *MockNoteCategoryRepository_FindByIDAndUserWithChildren_Call {
	_c.Call.Return(run)
	return _c
}

// GetMaxPosition provides a mock function with given fields: userID, parentID
func (_m *MockNoteCategoryRepository) GetMaxPosition(userID int, parentID *int) (int, error) {
	ret := _m.Called(userID, parentID)

	if len(ret) == 0 {
		panic("no return value specified for GetMaxPosition")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(int, *int) (int, error)); ok {
		return rf(userID, parentID)
	}
	if rf, ok := ret.Get(0).(func(int, *int) int); ok {
		r0 = rf(userID, parentID)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(int, *int) error); ok {
		r1 = rf(userID, parentID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockNoteCategoryRepository_GetMaxPosition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMaxPosition'
type MockNoteCategoryRepository_GetMaxPosition_Call struct {
	*mock.Call
}

// GetMaxPosition is a helper method to define mock.On call
//   - userID int
//   - parentID *int
func (_e *MockNoteCategoryRepository_Expecter) GetMaxPosition(userID interface{}, parentID interface{}) *MockNoteCategoryRepository_GetMaxPosition_Call {
	return &MockNoteCategoryRepository_GetMaxPosition_Call{Call: _e.mock.On("GetMaxPosition", userID, parentID)}
}

func (_c *MockNoteCategoryRepository_GetMaxPosition_Call) Run(run func(userID int, parentID *int)) *MockNoteCategoryRepository_GetMaxPosition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(int), args[1].(*int))
	})
	return _c
}

func (_c *MockNoteCategoryRepository_GetMaxPosition_Call) Return(_a0 int, _a1 error) *MockNoteCategoryRepository_GetMaxPosition_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockNoteCategoryRepository_GetMaxPosition_Call) RunAndReturn(run func(int, *int) (int, error)) *MockNoteCategoryRepository_GetMaxPosition_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: in
func (_m *MockNoteCategoryRepository) Update(in *entity.NoteCategory) error {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.NoteCategory) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNoteCategoryRepository_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type MockNoteCategoryRepository_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - in *entity.NoteCategory
func (_e *MockNoteCategoryRepository_Expecter) Update(in interface{}) *MockNoteCategoryRepository_Update_Call {
	return &MockNoteCategoryRepository_Update_Call{Call: _e.mock.On("Update", in)}
}

func (_c *MockNoteCategoryRepository_Update_Call) Run(run func(in *entity.NoteCategory)) *MockNoteCategoryRepository_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.NoteCategory))
	})
	return _c
}

func (_c *MockNoteCategoryRepository_Update_Call) Return(_a0 error) *MockNoteCategoryRepository_Update_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNoteCategoryRepository_Update_Call) RunAndReturn(run func(*entity.NoteCategory) error) *MockNoteCategoryRepository_Update_Call {
	_c.Call.Return(run)
	return _c
}

// UpdatePosition provides a mock function with given fields: in
func (_m *MockNoteCategoryRepository) UpdatePosition(in *entity.NoteCategory) error {
	ret := _m.Called(in)

	if len(ret) == 0 {
		panic("no return value specified for UpdatePosition")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*entity.NoteCategory) error); ok {
		r0 = rf(in)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockNoteCategoryRepository_UpdatePosition_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdatePosition'
type MockNoteCategoryRepository_UpdatePosition_Call struct {
	*mock.Call
}

// UpdatePosition is a helper method to define mock.On call
//   - in *entity.NoteCategory
func (_e *MockNoteCategoryRepository_Expecter) UpdatePosition(in interface{}) *MockNoteCategoryRepository_UpdatePosition_Call {
	return &MockNoteCategoryRepository_UpdatePosition_Call{Call: _e.mock.On("UpdatePosition", in)}
}

func (_c *MockNoteCategoryRepository_UpdatePosition_Call) Run(run func(in *entity.NoteCategory)) *MockNoteCategoryRepository_UpdatePosition_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.NoteCategory))
	})
	return _c
}

func (_c *MockNoteCategoryRepository_UpdatePosition_Call) Return(_a0 error) *MockNoteCategoryRepository_UpdatePosition_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockNoteCategoryRepository_UpdatePosition_Call) RunAndReturn(run func(*entity.NoteCategory) error) *MockNoteCategoryRepository_UpdatePosition_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockNoteCategoryRepository creates a new instance of MockNoteCategoryRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockNoteCategoryRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockNoteCategoryRepository {
	mock := &MockNoteCategoryRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
